{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Documentation Page for IO-Tracer! Technical documentation for Linux kernel-level I/O tracing system using eBPF technology. What is IO-Tracer? IO-Tracer is a research tool that collects data about how computers use their storage systems. Researchers use this tool to understand real-world computer workloads, essentially studying patterns of how different processes and users interact with files and storage devices. Background Most operations occurring within our computers remain invisible to users. This design choice makes sense because the average user doesn't need detailed information about every process running under the hood. However, researchers have a different perspective. They're deeply interested in understanding and visualizing the intricate pathways of computational operations that power our digital experiences. To understand these computational pathways, we need a specialized program capable of monitoring them. This is where IO-Tracer comes in. IO-Tracer operates as an intermediary layer between your daily applications and your computer's hardware, residing within the operating system without disrupting existing operations. This tool captures all the necessary data for research purposes while maintaining strict privacy standards. It cannot access the content within your files and only collects metadata such as file names and system calls. What do we collect? IO-Tracer collects five key types of data to provide comprehensive insights into computational operations. First, it captures the precise timestamp of each operation to establish when activities occur. Second, it records the type of operation being performed, whether it's opening, reading, writing, or closing files. Third, it identifies which specific process ( process name ) is performing each operation. Finally, it logs the file location information, including both the file path and technical identifiers that specify where operations are taking place. Finally, it measures the size of data being requested during each operation. How do we use the collected data? The data collected by IO-Tracer serves as valuable input for academic research. Individual datasets are aggregated with data from other participants to reveal meaningful patterns and generate statistical insights about computational behavior. Access to this research data is strictly limited to authorized researchers. Throughout the data collection process, all information remains securely stored on the user's personal computer, ensuring complete user control over their data. The research team can only access this data through direct user consent. we must explicitly request permission from each participant before any data is transferred from their system to our research infrastructure.","title":"Introduction"},{"location":"#welcome-to-documentation-page-for-io-tracer","text":"Technical documentation for Linux kernel-level I/O tracing system using eBPF technology.","title":"Welcome to Documentation Page for IO-Tracer!"},{"location":"#what-is-io-tracer","text":"IO-Tracer is a research tool that collects data about how computers use their storage systems. Researchers use this tool to understand real-world computer workloads, essentially studying patterns of how different processes and users interact with files and storage devices.","title":"What is IO-Tracer?"},{"location":"#background","text":"Most operations occurring within our computers remain invisible to users. This design choice makes sense because the average user doesn't need detailed information about every process running under the hood. However, researchers have a different perspective. They're deeply interested in understanding and visualizing the intricate pathways of computational operations that power our digital experiences. To understand these computational pathways, we need a specialized program capable of monitoring them. This is where IO-Tracer comes in. IO-Tracer operates as an intermediary layer between your daily applications and your computer's hardware, residing within the operating system without disrupting existing operations. This tool captures all the necessary data for research purposes while maintaining strict privacy standards. It cannot access the content within your files and only collects metadata such as file names and system calls.","title":"Background"},{"location":"#what-do-we-collect","text":"IO-Tracer collects five key types of data to provide comprehensive insights into computational operations. First, it captures the precise timestamp of each operation to establish when activities occur. Second, it records the type of operation being performed, whether it's opening, reading, writing, or closing files. Third, it identifies which specific process ( process name ) is performing each operation. Finally, it logs the file location information, including both the file path and technical identifiers that specify where operations are taking place. Finally, it measures the size of data being requested during each operation.","title":"What do we collect?"},{"location":"#how-do-we-use-the-collected-data","text":"The data collected by IO-Tracer serves as valuable input for academic research. Individual datasets are aggregated with data from other participants to reveal meaningful patterns and generate statistical insights about computational behavior. Access to this research data is strictly limited to authorized researchers. Throughout the data collection process, all information remains securely stored on the user's personal computer, ensuring complete user control over their data. The research team can only access this data through direct user consent. we must explicitly request permission from each participant before any data is transferred from their system to our research infrastructure.","title":"How do we use the collected data?"},{"location":"privacy/","text":"Privacy Protection Measures Automatic Filtering The tool systematically excludes virtual filesystems such as /proc , /sys , /dev , and tmpfs , which contain system-generated information rather than user data. To prevent recursive loops and maintain system performance, the tracer implements self-tracing prevention by automatically excluding its own input/output operations from the collected data. Additionally, the system filters out special files including pipes, sockets, and device files. Data Minimization Techniques The tool features configurable cache event sampling, allowing researchers to capture representative data patterns by recording only a specified ratio of events, such as one in every ten operations. To prevent excessive storage consumption, the tool implements time-based log rotation with a default 24-hour cycle, automatically archiving older data while maintaining recent activity logs. Process-specific filtering capabilities enable users to focus data collection on particular applications or exclude unnecessary system processes from monitoring. Finally, the tool incorporates automatic compression and cleanup routines that optimize storage space and remove outdated data. Excluded Information File contents or user data Network packet payloads User credentials or passwords Environment variables Command-line arguments beyond process names","title":"Data Collection"},{"location":"privacy/#privacy-protection-measures","text":"","title":"Privacy Protection Measures"},{"location":"privacy/#automatic-filtering","text":"The tool systematically excludes virtual filesystems such as /proc , /sys , /dev , and tmpfs , which contain system-generated information rather than user data. To prevent recursive loops and maintain system performance, the tracer implements self-tracing prevention by automatically excluding its own input/output operations from the collected data. Additionally, the system filters out special files including pipes, sockets, and device files.","title":"Automatic Filtering"},{"location":"privacy/#data-minimization-techniques","text":"The tool features configurable cache event sampling, allowing researchers to capture representative data patterns by recording only a specified ratio of events, such as one in every ten operations. To prevent excessive storage consumption, the tool implements time-based log rotation with a default 24-hour cycle, automatically archiving older data while maintaining recent activity logs. Process-specific filtering capabilities enable users to focus data collection on particular applications or exclude unnecessary system processes from monitoring. Finally, the tool incorporates automatic compression and cleanup routines that optimize storage space and remove outdated data.","title":"Data Minimization Techniques"},{"location":"privacy/#excluded-information","text":"File contents or user data Network packet payloads User credentials or passwords Environment variables Command-line arguments beyond process names","title":"Excluded Information"},{"location":"start/","text":"Quick Start Guide Prerequisites Linux system with kernel headers Python 3.x sudo privileges (required for BPF operations) BPF Compiler Collection / BCC You can execute these commands for BCC installation: # Debian echo deb http://cloudfront.debian.net/debian sid main >> /etc/apt/sources.list sudo apt-get install -y bpfcc-tools libbpfcc libbpfcc-dev linux-headers-$(uname -r) # Ubuntu sudo apt-get install bpfcc-tools linux-headers-$(uname -r) # Fedora sudo dnf install bcc # Arch pacman -S bcc bcc-tools python-bcc For more distros, visit the official BCC's installation guide Basic Usages Infinite tracing (Exit on demand) sudo python3 iotrc.py Quick Start (30 Seconds Trace) sudo python3 iotrc.py -d 30 Command Options Core options -d, --duration <seconds> - Duration to trace (default: indefinite) -o, --output <directory> - Output directory (default: auto-generated) -v, --verbose - Enable verbose logging -a, --anonimize - Anonymize process and file names Advance options -b BPF_FILE, --bpf-file BPF_FILE - BPF C source file path -p PAGE_CNT, --page-cnt PAGE_CNT - Number of pages for perf buffer (default 8) -s SPLIT_THRESHOLD, --split_threshold SPLIT_THRESHOLD - Split threshold in seconds (default 1 day) -a, --anonimize - Enable anonymization of process and file names -uc, --uncompressed - Enable uncompressed output","title":"Quick Start"},{"location":"start/#quick-start-guide","text":"","title":"Quick Start Guide"},{"location":"start/#prerequisites","text":"Linux system with kernel headers Python 3.x sudo privileges (required for BPF operations) BPF Compiler Collection / BCC You can execute these commands for BCC installation: # Debian echo deb http://cloudfront.debian.net/debian sid main >> /etc/apt/sources.list sudo apt-get install -y bpfcc-tools libbpfcc libbpfcc-dev linux-headers-$(uname -r) # Ubuntu sudo apt-get install bpfcc-tools linux-headers-$(uname -r) # Fedora sudo dnf install bcc # Arch pacman -S bcc bcc-tools python-bcc For more distros, visit the official BCC's installation guide","title":"Prerequisites"},{"location":"start/#basic-usages","text":"Infinite tracing (Exit on demand) sudo python3 iotrc.py Quick Start (30 Seconds Trace) sudo python3 iotrc.py -d 30","title":"Basic Usages"},{"location":"start/#command-options","text":"","title":"Command Options"},{"location":"start/#core-options","text":"-d, --duration <seconds> - Duration to trace (default: indefinite) -o, --output <directory> - Output directory (default: auto-generated) -v, --verbose - Enable verbose logging -a, --anonimize - Anonymize process and file names","title":"Core options"},{"location":"start/#advance-options","text":"-b BPF_FILE, --bpf-file BPF_FILE - BPF C source file path -p PAGE_CNT, --page-cnt PAGE_CNT - Number of pages for perf buffer (default 8) -s SPLIT_THRESHOLD, --split_threshold SPLIT_THRESHOLD - Split threshold in seconds (default 1 day) -a, --anonimize - Enable anonymization of process and file names -uc, --uncompressed - Enable uncompressed output","title":"Advance options"},{"location":"technical/","text":"Technical Details Data Collection Methodology Implementation Using eBPF-based kernel probes (kprobes) Kernel Probe Points Layer Functions Traced VFS Layer vfs_read , vfs_write , vfs_open , vfs_fsync , vfs_fsync_range , __fput Block Layer blk_mq_start_request Page Cache filemap_add_folio (miss), folio_mark_accessed (hit) Output Directory Structures result/IO_trace_analysis_YYYYMMDD_HHMMSS/ \u251c\u2500 raw_trace_YYYYMMDD_HHMMSS.tar.gz \u251c\u2500\u2500 vfs/log/vfs_trace_*.log \u251c\u2500\u2500 block/log/block_trace_*.log \u2514\u2500\u2500 cache/log/cache_trace_*.log Filesystem Trace Format Log Format timestamp op_name pid comm filename inode size_val flags_str Field Specs Field Data Type Description Privacy Level timestamp uint64 Nanoseconds since boot Non-sensitive op_name string Operation (READ/WRITE/OPEN/CLOSE/FSYNC) Non-sensitive pid uint32 Process identifier Non-sensitive comm char[16] Process command name Non-sensitive (Does not contain personal info) filename char[256] File name Non-sensitive (Does not contain personal info) inode uint64 File inode number Non-sensitive size_val uint64 I/O size in bytes Non-sensitive flags_str string Open flags (e.g., O_RDONLY) Non-sensitive Example: 1234567890 READ 1234 firefox config.txt 98765 4096 O_RDONLY|O_DIRECT Block I/O Trace Format Log Format timestamp pid tid comm sector nr_sectors operation cpu_id parent_info bio_size Field Spec Field Data Type Description Privacy Level timestamp uint64 Nanoseconds since boot Non-sensitive pid uint32 Process identifier Non-sensitive tid uint32 Thread identifier Non-sensitive comm char[16] Process command name Non-sensitive (Does not contain personal info) sector uint64 Disk sector (LBA) Non-sensitive nr_sectors uint32 Number of sectors Non-sensitive operation string Operation type (REQ_OP_READ/WRITE) Non-sensitive cpu_id uint32 CPU core identifier Non-sensitive parent_info string Parent process information Non-sensitive (Does not contain personal info) bio_size uint64 Block I/O size in bytes Non-sensitive Example: 1234567890 1234 5678 mysqld 2048576 256 REQ_OP_WRITE cpu:0 ppid:1(systemd) 131072 Page Cache Trace Data Format Log Format timestamp pid comm status Field Spec Field Data Type Description Privacy Level timestamp uint64 Nanoseconds since boot Non-sensitive pid uint32 Process identifier Non-sensitive comm char[16] Process command name Non-sensitive status string HIT or MISS Non-sensitive Example: 1234567890 1234 chrome HIT","title":"Technical Details"},{"location":"technical/#technical-details","text":"","title":"Technical Details"},{"location":"technical/#data-collection-methodology","text":"","title":"Data Collection Methodology"},{"location":"technical/#implementation","text":"Using eBPF-based kernel probes (kprobes)","title":"Implementation"},{"location":"technical/#kernel-probe-points","text":"Layer Functions Traced VFS Layer vfs_read , vfs_write , vfs_open , vfs_fsync , vfs_fsync_range , __fput Block Layer blk_mq_start_request Page Cache filemap_add_folio (miss), folio_mark_accessed (hit)","title":"Kernel Probe Points"},{"location":"technical/#output-directory-structures","text":"result/IO_trace_analysis_YYYYMMDD_HHMMSS/ \u251c\u2500 raw_trace_YYYYMMDD_HHMMSS.tar.gz \u251c\u2500\u2500 vfs/log/vfs_trace_*.log \u251c\u2500\u2500 block/log/block_trace_*.log \u2514\u2500\u2500 cache/log/cache_trace_*.log","title":"Output Directory Structures"},{"location":"technical/#filesystem-trace-format","text":"","title":"Filesystem Trace Format"},{"location":"technical/#log-format","text":"timestamp op_name pid comm filename inode size_val flags_str","title":"Log Format"},{"location":"technical/#field-specs","text":"Field Data Type Description Privacy Level timestamp uint64 Nanoseconds since boot Non-sensitive op_name string Operation (READ/WRITE/OPEN/CLOSE/FSYNC) Non-sensitive pid uint32 Process identifier Non-sensitive comm char[16] Process command name Non-sensitive (Does not contain personal info) filename char[256] File name Non-sensitive (Does not contain personal info) inode uint64 File inode number Non-sensitive size_val uint64 I/O size in bytes Non-sensitive flags_str string Open flags (e.g., O_RDONLY) Non-sensitive Example: 1234567890 READ 1234 firefox config.txt 98765 4096 O_RDONLY|O_DIRECT","title":"Field Specs"},{"location":"technical/#block-io-trace-format","text":"","title":"Block I/O Trace Format"},{"location":"technical/#log-format_1","text":"timestamp pid tid comm sector nr_sectors operation cpu_id parent_info bio_size","title":"Log Format"},{"location":"technical/#field-spec","text":"Field Data Type Description Privacy Level timestamp uint64 Nanoseconds since boot Non-sensitive pid uint32 Process identifier Non-sensitive tid uint32 Thread identifier Non-sensitive comm char[16] Process command name Non-sensitive (Does not contain personal info) sector uint64 Disk sector (LBA) Non-sensitive nr_sectors uint32 Number of sectors Non-sensitive operation string Operation type (REQ_OP_READ/WRITE) Non-sensitive cpu_id uint32 CPU core identifier Non-sensitive parent_info string Parent process information Non-sensitive (Does not contain personal info) bio_size uint64 Block I/O size in bytes Non-sensitive Example: 1234567890 1234 5678 mysqld 2048576 256 REQ_OP_WRITE cpu:0 ppid:1(systemd) 131072","title":"Field Spec"},{"location":"technical/#page-cache-trace-data-format","text":"","title":"Page Cache Trace Data Format"},{"location":"technical/#log-format_2","text":"timestamp pid comm status","title":"Log Format"},{"location":"technical/#field-spec_1","text":"Field Data Type Description Privacy Level timestamp uint64 Nanoseconds since boot Non-sensitive pid uint32 Process identifier Non-sensitive comm char[16] Process command name Non-sensitive status string HIT or MISS Non-sensitive Example: 1234567890 1234 chrome HIT","title":"Field Spec"}]}